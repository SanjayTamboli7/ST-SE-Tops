Checklist for Item Return To Supplier

1. Functional Requirements
What are the key actions?

Create, Edit, View, Delete Item Return To Supplier
Validate quantity is positive

2. Data Requirements
Following fields are needed in Stock Adjustment table.

CREATE TABLE `txnreturntosupplier` (
  `returnid` int NOT NULL AUTO_INCREMENT,
  `grnid` int NOT NULL,
  `itemid` int NOT NULL,
  `qty` int NOT NULL,
  `returndate` date NOT NULL,
  `reason` text,
  `lastaddeditby` int NOT NULL,
  `lasteditdatetime` datetime NOT NULL,
  PRIMARY KEY (`returnid`),
  KEY `grnid` (`grnid`),
  KEY `itemid` (`itemid`),
  CONSTRAINT `txnreturntosupplier_ibfk_1` FOREIGN KEY (`grnid`) REFERENCES `txngrnheader` (`grnid`),
  CONSTRAINT `txnreturntosupplier_ibfk_2` FOREIGN KEY (`itemid`) REFERENCES `mstitem` (`itemid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

3. Validation Rules
`adjusteddate` should be current / system date by default and should not be greater than current / system date. Allow user to input the date too.
`status` should be listbox of values like 'Pending', 'Approved', 'Rejected', 'Posted'

4. UI/UX Specification
Modal or full-page Stock Adjustment form? Modal

Line-wise editing or inline rows? line-wise editing

5. API Endpoints (Spring Boot)
Stock Adjustment APIs to be generated for CRUD operation.

GET call at `http://localhost:8080/api/otherusers` will give you a list of values for listbox for `adjustedby` field. JSON response is { "content": [{ "ouserid": 24, "ousername": "User 24", "ouseremailid": "user24@example.com", "ousercontactno": "9876543217", "ouserdeptid": 6, "ouserdesignationid": 9, "lastaddeditby": 1, "ouserpassword": "password", "ouserstatus": "Active", "lasteditdatetime": "2025-04-20T13:21:59", "userId": 24 }],
Â "pageable": { "pageNumber": 0, "pageSize": 10, "sort": { "empty": false, "sorted": true, "unsorted": false }, "offset": 0, "paged": true, "unpaged": false }, "totalPages": 14, "totalElements": 132, "last": false, "size": 10, "number": 0, "sort": { "empty": false, "sorted": true, "unsorted": false }, "first": true, "numberOfElements": 10, "empty": false}
In the database, store value of `ouserid` field into `adjustedby` field. But display value of `ousername` field during CRUD operation.

GET call at `http://localhost:8080/api/items?search=\\\\\\\\\\\\\\\&page=0\\\\\\\\\\\\\\\&size=10\\\\\\\\\\\\\\\&sortBy=itemname\\\\\\\\\\\\\\\&sortDir=asc` will give you a list of values for listbox for `itemid` field. JSON response is
{"content":[{"itemid":4,"itemname":"Test Item 4","itemcode":"TI4","categoryid":4,"uomid":4,"reorderlevel":40,"maxstock":200,"lastaddeditby":15,"lasteditdatetime":"2025-04-27T17:53:30"}
],"pageable":{"pageNumber":0,"pageSize":10,"sort":{"empty":false,"sorted":true,"unsorted":false},"offset":0,"paged":true,"unpaged":false},"last":true,"totalPages":1,"totalElements":4,"numberOfElements":4,"first":true,"size":10,"number":0,"sort":{"empty":false,"sorted":true,"unsorted":false},"empty":false}
In the database, store value of `itemid` field from JSON into `itemid` field of `txnstockadjustment` table. But display value of `itemname` field during CRUD operation.

6. Business Rules
In Stock Adjustment Form enable Edit / Delete command button, as long as `status` = 'Pending'

Do you need approval or audit tracking? I need approval.

7. Optional Features
Stock Adjustment PDF generation - No
Excel import for bulk Stock Adjustment lines - No
Email or alert after Stock Adjustment creation - No

8. General requirement specification
Note that this CRUD operation is for single `txnstockadjustment` table. When user click 'Save' button of the form, data should be stored in the `txnstockadjustment` table. Frist share code of Spring boot REST API with DTO layers. Then, share reactJS + bootstrap code with all required "import statement" for professional looking page for CRUD and data view. Data listing (db grid), dynamic search from database, with server-side pagination using page numbers to navigate to the specific page, sorting, messages on save/delete. `lastaddeditby` should be updated with "sessionStorage.getItem('userid')". `lasteditdatetime` should store the system date & time when either record is inserted or updated.
Search input with "Add" button on the same row. Modal pop up for Add/Edit/View with Bootstrap. Before submit, generate the message for 'NOT NULL' input if user does not provide the value during 'Add' & 'Edit' mode of `txnstockadjustment` tables. Maintain all 'addMode', 'viewMode' and 'editMode' for CRUD operation `txnstockadjustment` tables. Enable 'View', 'Edit' and 'Delete' button in 'Action column'. Enable 'Edit' and 'Delete' button where status is 'Pending'.
For all Add / Edit code should be in modal window. I have only one package "com.example.hms2".

Clarifications Needed:
Session Management:

Should I assume that sessionStorage.getItem('userid') is always available and valid across all add/edit operations? Yes.

Is there a session timeout or expiry to be handled? Yes.

Date Formatting and Handling:

What format should be used for adjusteddate, lasteditdatetime in the UI and while submitting to the API? ISO (yyyy-MM-dd)? Yes

lasteditdatetime and lastaddeditby:

Should the client always generate the lasteditdatetime using new Date() and not rely on the server for it? Yes

Audit & Approval:

Is the status field change controlled manually by user selection.

Do you have any other questions regarding above mentioned requirements?

Share ItemDTO

My observations;

Server-side pagination using page numbers to navigate to the specific page is missing.

2. GET call at `http://localhost:8080/api/otherusers` will give you a list of values for listbox for `requestedby` field. JSON response is { "content": [{ "ouserid": 24, "ousername": "User 24", "ouseremailid": "user24@example.com", "ousercontactno": "9876543217", "ouserdeptid": 6, "ouserdesignationid": 9, "lastaddeditby": 1, "ouserpassword": "password", "ouserstatus": "Active", "lasteditdatetime": "2025-04-20T13:21:59", "userId": 24 }],
"pageable": { "pageNumber": 0, "pageSize": 10, "sort": { "empty": false, "sorted": true, "unsorted": false }, "offset": 0, "paged": true, "unpaged": false }, "totalPages": 14, "totalElements": 132, "last": false, "size": 10, "number": 0, "sort": { "empty": false, "sorted": true, "unsorted": false }, "first": true, "numberOfElements": 10, "empty": false}
In the database, store value of `ouserid` field into `requestedby` field. But display value of `ousername` field during CRUD operation.

3. GET call at `http://localhost:8080/api/departments` will give you a list of values for listbox for `departmentid` field.JSON response is { "content": [{ "deptid": 24,  "deptname": "Housekeeping",  "deptheadname": "Housekeeping-Head",  "activestatus": "Active",  "lastaddeditby": 1,  "lasteditdatetime": "2025-04-07T16:07:27" }  ],  "pageable": {  "pageNumber": 0,  "pageSize": 10,  "sort": {  "empty": true,  "sorted": false,  "unsorted": true  },  "offset": 0,  "paged": true,  "unpaged": false  },  "last": true,  "totalPages": 1,  "totalElements": 7,  "numberOfElements": 7,  "first": true,  "size": 10,  "number": 0,  "sort": {  "empty": true,  "sorted": false,  "unsorted": true  },  "empty": false}
In the database, store value of `deptid` field into `departmentid` field. But display value of `deptname` field during CRUD operation.

4. GET call at `http://localhost:8080/api/items?search=\&page=0\&size=10\&sortBy=itemname\&sortDir=asc` will give you a list of values for listbox for `itemid` field. JSON response is
{"content":[{"itemid":4,"itemname":"Test Item 4","itemcode":"TI4","categoryid":4,"uomid":4,"reorderlevel":40,"maxstock":200,"lastaddeditby":15,"lasteditdatetime":"2025-04-27T17:53:30"}
],"pageable":{"pageNumber":0,"pageSize":10,"sort":{"empty":false,"sorted":true,"unsorted":false},"offset":0,"paged":true,"unpaged":false},"last":true,"totalPages":1,"totalElements":4,"numberOfElements":4,"first":true,"size":10,"number":0,"sort":{"empty":false,"sorted":true,"unsorted":false},"empty":false}
In the database, store value of `itemid` field from JSON into `itemid` field of `txnissuerequest` table. But display value of `itemname` field during CRUD operation.

GET call at `http://localhost:8080/api/departments` will give you a list of values for listbox for `departmentid` field.JSON response is { "content": [{ "deptid": 24,  "deptname": "Housekeeping",  "deptheadname": "Housekeeping-Head",  "activestatus": "Active",  "lastaddeditby": 1,  "lasteditdatetime": "2025-04-07T16:07:27" }  ],  "pageable": {  "pageNumber": 0,  "pageSize": 10,  "sort": {  "empty": true,  "sorted": false,  "unsorted": true  },  "offset": 0,  "paged": true,  "unpaged": false  },  "last": true,  "totalPages": 1,  "totalElements": 7,  "numberOfElements": 7,  "first": true,  "size": 10,  "number": 0,  "sort": {  "empty": true,  "sorted": false,  "unsorted": true  },  "empty": false}
In the database, store value of `deptid` field into `departmentid` field. But display value of `deptname` field during CRUD operation.